{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","lib/API_KEY.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","date","temperature","Math","round","icon","src","alt","feels_like","min","max","description","humidity","wind","error","KEY","App","state","undefined","temp_min","temp_max","wind_speed","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","day","moment","format","cod","setState","main","temp","sys","weather","speed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.568e67e0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n\t<div>\n\t\t<h1 className=\"title-container__title\">The GetWeather App</h1>\n\t\t<h3 className=\"title-container__subtitle\">Get latest temperature, conditions and more... right here</h3>\n\t\t<footer>By @SujoyDutta</footer>\n\t</div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.getWeather}>\n\t\t<input type=\"text\" name=\"city\" placeholder=\"Your City Name\"/>\n\t\t<button className=\"setbutton\">Search</button>\n\t</form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && <h2 className=\"weather__key\"> \n\t \t\t<span> { props.city }, { props.country }</span>\n\t \t</h2> \n\t }\n\t {\t\n\t \tprops.date && <h5 className=\"date\"> \n\t \t\t<span> { props.date }</span>\n\t \t</h5> \n\t }\n\t <div>\n\t { \t\n\t \tprops.temperature && <h1 className=\"temp\">{ Math.round(props.temperature) }<sup>o</sup>C </h1> \n\t }\n\t {\n\t\t props.icon && <img className=\"img-fluid\" src={`http://openweathermap.org/img/w/${props.icon}.png`} alt=\"weather-img\"/>\n\t }\n\t </div>\n\t <div>\n\t\t\t{ \t\n\t\t\t\tprops.feels_like && <p className=\"pad\"><strong>Feels_like:</strong> { Math.round(props.feels_like) }<sup>o</sup>C</p> \n\t\t\t}\n\t\t\t{ \t\n\t\t\t\tprops.min && <p className=\"pad\"><strong>Min Temp:</strong> { Math.round(props.min) }<sup>o</sup>C</p> \n\t\t\t}\n\t\t\t{ \t\n\t\t\t\tprops.max && <p className=\"pad\"><strong>Max Temp:</strong> { Math.round(props.max) }<sup>o</sup>C</p> \n\t\t\t}\n\t </div>\n\t { \t\n\t \tprops.description && props.humidity && props.wind &&  \n\t\t \t<div className=\"contains\">Conditions:\n\t\t\t\t <ul>\n\t\t\t\t\t<li> Humidity: { props.humidity }% </li>\n\t\t\t\t\t<li> Wind Speed: { props.wind } meter/sec </li> \n\t\t\t\t\t<li> Description: { props.description } </li>\n\t\t\t\t </ul>\n\t\t\t </div> \n\t }\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default Weather;","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./App.css\";\nimport moment from 'moment';\nimport {API_KEY} from \"./lib/API_KEY\"\n\nconst KEY = API_KEY; \n\nclass App extends React.Component {\n\n  //Initializing the state \n  state = {\n    temperature: undefined,\n    icon: undefined,\n    city: undefined,\n    country: undefined,\n    date: undefined,\n    feels_like: undefined,\n    temp_min: undefined,\n    temp_max: undefined,\n    wind_speed: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  //#---------Using the getWeather function fetching the API and parsing it with JSON---------- \n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY}&units=metric`);\n    const data = await api_call.json();\n    \n    console.log(data);\n    //#------------Using Moment.js - a framework that lets you play with date and time, here it is used to show the local Date & Time-------------  \n    const day = moment().format('LLLL');\n     \n    //#----------Using setState to conditionally render the data---------------------\n    if (city && data.cod !== 404) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        date: day,\n        icon: data.weather[0].icon,\n        feels_like: data.main.feels_like,\n        temp_min: data.main.temp_min,\n        temp_max: data.main.temp_max,\n        wind_speed: data.wind.speed,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        date: undefined,\n        icon: undefined,\n        feels_like: undefined,\n        temp_min: undefined,\n        temp_max: undefined,\n        wind_speed: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values.\"\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-sm-5 col-xs-12 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-sm-7 col-xs-12 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature = {this.state.temperature} \n                    date = {this.state.date}\n                    icon = {this.state.icon}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    feels_like = {this.state.feels_like}\n                    min = {this.state.temp_min}\n                    max = {this.state.temp_max}\n                    humidity = {this.state.humidity}\n                    wind = {this.state.wind_speed}\n                    description = {this.state.description}\n                    error = {this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;","export const API_KEY = \"6bf1cfaf8cab154927c0aa422c5b24c1\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./App.css\";\nimport * as serviceWorker from './serviceWorker';\nimport './bin/bootstrap-4.0.0/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}